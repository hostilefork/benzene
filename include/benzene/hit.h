//
// hit.h
// This file is part of Benzene
// Copyright (C) 2002-2014 HostileFork.com
//
// Benzene is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Benzene is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Benzene.  If not, see <http://www.gnu.org/licenses/>.
//
// See http://benzene.hostilefork.com/ for more information on this project
//

#ifndef BENZENE_HIT_H
#define BENZENE_HIT_H

#include "methyl/accessor.h"

namespace benzene {

//////////////////////////////////////////////////////////////////////////////
//
// benzene::Hit
//
// A "Hit" is an abstract object representing a hit test.  The system records
// a series of unique hits, which it then offers to the client application in
// a pecking order of "gestures".  For example: it may be sometimes
// interesting to consider only the first and last Hit object...these are
// offered in the form of a "Line" gesture for producing operations.
//
// Hits may be generated by any widgets in the system, and the determination
// of what operation to produce is done by the application as a whole.  That
// means that for application-local Drag and Drop, Hits are the right way
// to implement it.  Acceptance of Drag and Drop from other applications is
// a separate function, as is the translation of a hit into a drag source
// for other apps.
//
// While Hits were once their own class, their need to be able to be compared
// for structural equality made it sensible to just make them Methyl nodes.
// At the present time they are used merely as data, so there is no additional
// accessor or type hierarchy beyond an ordinary Methyl::Node.  So it is a
// typedef, yet still kept separate for documentation purposes... or if it
// turns out to be necessary to subclass node for a Hit-specific purpose.
//

typedef methyl::Accessor Hit;

} // end namespace benzene

#endif // BENZENE_HIT_H
